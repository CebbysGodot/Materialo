[gd_resource type="VisualShader" load_steps=5 format=2]

[sub_resource type="VisualShaderNodeTextureUniform" id=1]
uniform_name = "TextureUniform"

[sub_resource type="VisualShaderNodeVectorOp" id=2]
operator = 2

[sub_resource type="VisualShaderNodeColorConstant" id=3]
constant = Color( 1, 0, 0, 1 )

[sub_resource type="VisualShaderNodeScalarOp" id=4]
operator = 2

[resource]
code = "shader_type spatial;
uniform sampler2D TextureUniform;



void vertex() {
// Output:0

}

void fragment() {
// Color:4
	vec3 n_out4p0;
	float n_out4p1;
	n_out4p0 = vec3(1.000000,0.000000,0.000000);
	n_out4p1 = 1.000000;

// TextureUniform:2
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 n_tex_read = texture( TextureUniform , UV.xy );
		n_out2p0 = n_tex_read.rgb;
		n_out2p1 = n_tex_read.a;
	}

// VectorOp:3
	vec3 n_out3p0;
	n_out3p0 = n_out4p0 * n_out2p0;

// ScalarOp:5
	float n_out5p0;
	n_out5p0 = n_out4p1 * n_out2p1;

// Output:0
	ALBEDO = n_out3p0;
	ALPHA = n_out5p0;

}

void light() {
// Output:0

}
"
nodes/fragment/0/position = Vector2( 480, 100 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( 20, 60 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( 320, 40 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( 160, 40 )
nodes/fragment/5/node = SubResource( 4 )
nodes/fragment/5/position = Vector2( 260, 160 )
nodes/fragment/connections = PoolIntArray( 2, 0, 3, 1, 4, 0, 3, 0, 4, 1, 5, 0, 2, 1, 5, 1, 5, 0, 0, 1, 3, 0, 0, 0 )
